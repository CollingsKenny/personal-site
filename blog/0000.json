{"html":"<p>Svelte has been gaining momentum recently and offers simpler solutions than React. I&#39;ve been meaning to create a personal site to show off my work and to publish my ideas for a while now. After reading a few posts from other developers about Sapper, I decided to give it a shot.</p>\n<h2 id=\"üí°-first-things-first-start-with-the-ideas\">üí° First thing&#39;s first. Start with the ideas.</h2>\n<p>I started by writing some notes. I like to create an &quot;outline&quot; of the project before I begin to organize my ideas and define the project scope. This outline will continue to change as the project progresses.</p>\n<p><img src=\"images/site_outline.png\" alt=\"Site Outline\"></p>\n<p>I also designed my blog page in Figma to give myself the opportunity to play with my ideas and give the project a more concrete vision. Design, in general, has always intrigued me and is something I want to improve upon. Making great things comes with practice and experience, so I took this step seriously. I first sketched out some ideas in my notebook, and then flushed them out in Figma. After this, I implemented the design in good old HTML and CSS so that I could write clean code without the hurdle of learning a new javascript framework.</p>\n<p><img src=\"images/figma_mockup.png\" alt=\"Figma Mockup\"></p>\n<p>At this point I have a clear vision for what I want my site to look like, the types of information that may go on it, and a starting set of features to develop.</p>\n<h2 id=\"üèûÔ∏è-second-things-second-build-the-development-environment\">üèûÔ∏è Second thing&#39;s second. Build the development environment.</h2>\n<p>This part is always a mix of emotions. It&#39;s exciting because you get to finally start playing around with fancy new tools, but it&#39;s also nerve-racking because you have no clue how to use these tools.</p>\n<ol>\n<li>I followed the <a href=\"https://sapper.svelte.dev/docs#Getting_started\">Sapper Getting Started</a> guide to scaffold my application.</li>\n<li>Installed the <a href=\"https://marketplace.visualstudio.com/items?itemName=svelte.svelte-vscode\">VS Code Svelte</a> extension.</li>\n<li>Explored the <a href=\"https://sapper.svelte.dev/docs#Sapper_app_structure\">folder structure</a>.</li>\n<li>Now here I would like to say I spent some time reading and understanding the documentation but honestly, I do not have the attention span for that, so I jumped right in and began looking up tutorials and other examples of what I want to build.</li>\n</ol>\n<h2 id=\"üß∞-packages-and-tools\">üß∞ Packages and Tools</h2>\n<p>This is a list of the packages and tools I used to build my site (other than svelte and sapper).</p>\n<ul>\n<li><a href=\"https://date-fns.org/\">Date-fns</a><ul>\n<li>Take it or leave it, but I am using a date formatter for because I might want to change the date format later.</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/jonschlinkert/gray-matter\">Gray-matter</a><ul>\n<li>Manages the YAML at the top of my markdown blog posts.</li>\n</ul>\n</li>\n<li><a href=\"https://marked.js.org/\">Marked</a><ul>\n<li>Processes the markdown into html.</li>\n</ul>\n</li>\n<li><a href=\"https://shiki.matsu.io/\">Shiki</a><ul>\n<li>Syntax highlighter, this one uses the VSCode renderer and it&#39;s all fancy and stuff ‚ú®.</li>\n</ul>\n</li>\n<li><a href=\"https://www.npmjs.com/package/rollup-plugin-copy\">Rollup-plugin-copy</a><ul>\n<li>Copies pictures from the content folder to the Static folder served by Sapper.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"üèóÔ∏è-building-the-blog-a-few-key-points\">üèóÔ∏è Building the blog (A few key points)</h2>\n<h3 id=\"translating-markdown-into-svelte\">Translating markdown into svelte.</h3>\n<p>There a few different methods used the translate markdown into svelte. At first, I was excited about MDsvX (a svelte version of MDX), but its use cases ended up clashing with how I was intending to use markdown as content. I finally settled on Gray-matter, used to decode metadata from the markdown file, and marked, a markdown converter to render the markdown as html.</p>\n<h3 id=\"listing-the-blog-posts\">Listing the blog posts.</h3>\n<p>This gave me a little trouble, mostly because I did not understand how sapper merges dynamic and static information. I will now try my best to regurgate what I learned.</p>\n<h4 id=\"the-sapper-backend-and-frontend\">The Sapper &#39;backend&#39; and &#39;frontend&#39;</h4>\n<p>The mental model I developed to understand this is that each page in sapper can have two files: <code>index.svelte</code> (the frontend) and <code>index.json.js</code> (the backend). The timing, location (server vs client), and order of processing these pages is not intuitive but just know it is optimized and works wonderfully.</p>\n<h5 id=\"the-backend-jsonjs\">The &#39;backend&#39; (<code>.json.js</code>)</h5>\n<p>These files are written entirely in javascript and will return with a JSON response. This is where any dynamic information will get processed. So, in the case of our <code>/blog</code> route, the <code>/routes/blog/index.json.js</code> file needs to read through a the content folder (containing all the blog posts), extract the metadata (title, date, etc.), and return that in a JSON list.</p>\n<pre class=\"shiki\" style=\"background-color: #212121\"><code><span class=\"line\"><span style=\"color: #89DDFF\">import</span><span style=\"color: #EEFFFF\"> fs </span><span style=\"color: #89DDFF\">from</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">fs</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">import</span><span style=\"color: #EEFFFF\"> path </span><span style=\"color: #89DDFF\">from</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">path</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">import</span><span style=\"color: #EEFFFF\"> grayMatter </span><span style=\"color: #89DDFF\">from</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">gray-matter</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">;</span></span>\n\n<span class=\"line\"><span style=\"color: #89DDFF\">import</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #89DDFF\">{</span><span style=\"color: #F07178\"> </span><span style=\"color: #EEFFFF\">CONTENT_PATH</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">}</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #89DDFF\">from</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">../../config</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #545454\">// &quot;content/blog&quot;</span></span>\n\n<span class=\"line\"><span style=\"color: #545454\">// Map across &quot;content/blog&quot; folder and create a list</span></span>\n<span class=\"line\"><span style=\"color: #545454\">//   of the metadata from the index.md files.</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">const</span><span style=\"color: #EEFFFF\"> posts </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #EEFFFF\"> fs</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">readdirSync</span><span style=\"color: #EEFFFF\">(CONTENT_PATH)</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">map</span><span style=\"color: #EEFFFF\">(</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #EEFFFF\">file</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #C792EA\">=&gt;</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #C792EA\">const</span><span style=\"color: #F07178\"> </span><span style=\"color: #EEFFFF\">post</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #F07178\"> </span><span style=\"color: #EEFFFF\">fs</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">readFileSync</span><span style=\"color: #F07178\">(</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">    </span><span style=\"color: #EEFFFF\">path</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">resolve</span><span style=\"color: #F07178\">(</span><span style=\"color: #EEFFFF\">CONTENT_PATH</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">`${</span><span style=\"color: #EEFFFF\">file</span><span style=\"color: #89DDFF\">}</span><span style=\"color: #C3E88D\">/index.md</span><span style=\"color: #89DDFF\">`</span><span style=\"color: #F07178\">)</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">    </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">utf-8</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  )</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #89DDFF\">return</span><span style=\"color: #F07178\"> </span><span style=\"color: #82AAFF\">grayMatter</span><span style=\"color: #F07178\">(</span><span style=\"color: #EEFFFF\">post</span><span style=\"color: #F07178\">)</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #EEFFFF\">data</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #F07178\"> </span><span style=\"color: #545454\">// extract the metadata</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">}</span><span style=\"color: #EEFFFF\">)</span><span style=\"color: #89DDFF\">;</span></span>\n\n<span class=\"line\"><span style=\"color: #545454\">// Return the posts reversed,</span></span>\n<span class=\"line\"><span style=\"color: #545454\">//   so newest post is at the top of the page.</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">export</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #C792EA\">function</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #82AAFF\">get</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #EEFFFF\">req</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #EEFFFF\"> res</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #EEFFFF\">res</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">writeHead</span><span style=\"color: #F07178\">(</span><span style=\"color: #F78C6C\">200</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">    </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #F07178\">Content-Type</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">application/json</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #89DDFF\">}</span><span style=\"color: #F07178\">)</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #EEFFFF\">res</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">end</span><span style=\"color: #F07178\">(</span><span style=\"color: #EEFFFF\">JSON</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">stringify</span><span style=\"color: #F07178\">(</span><span style=\"color: #EEFFFF\">posts</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">reverse</span><span style=\"color: #F07178\">()))</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">}</span></span></code></pre><h5 id=\"the-frontend-svelte\">The frontend (<code>.svelte</code>)</h5>\n<p>These are svelte files. They do all the reactive svelte front-end stuff, contain the html and css, and ultimately display our information. So, for this example, we have the <code>/routes/blog/index.svelte</code> file which needs to display the title, with a link, of each blog post along with some additional information (date and tags). This is retrieved from the list of blogs we created in the <code>json</code> file. We do this simply by fetching at the <code>blog.json</code> endpoint (representing the file <code>/routes/blog/index.json.js</code>). Don&#39;t forget to create a <a href=\"https://svelte.dev/docs#1_export_creates_a_component_prop\">prop for the list of posts</a> so we can use it as normal.</p>\n<pre class=\"shiki\" style=\"background-color: #212121\"><code><span class=\"line\"><span style=\"color: #545454\">&lt;!-- </span></span>\n<span class=\"line\"><span style=\"color: #545454\">  /blog </span></span>\n<span class=\"line\"><span style=\"color: #545454\">--&gt;</span></span>\n\n<span class=\"line\"><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">script</span><span style=\"color: #89DDFF\"> </span><span style=\"color: #C792EA\">context</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">module</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">  </span><span style=\"color: #89DDFF\">export</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #C792EA\">async</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #C792EA\">function</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #82AAFF\">preload</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">    </span><span style=\"color: #C792EA\">const</span><span style=\"color: #F07178\"> </span><span style=\"color: #EEFFFF\">res</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">await</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">this.</span><span style=\"color: #82AAFF\">fetch</span><span style=\"color: #F07178\">(</span><span style=\"color: #89DDFF\">`</span><span style=\"color: #C3E88D\">blog.json</span><span style=\"color: #89DDFF\">`</span><span style=\"color: #F07178\">)</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">    </span><span style=\"color: #C792EA\">const</span><span style=\"color: #F07178\"> </span><span style=\"color: #EEFFFF\">data</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">await</span><span style=\"color: #F07178\"> </span><span style=\"color: #EEFFFF\">res</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">json</span><span style=\"color: #F07178\">()</span><span style=\"color: #89DDFF\">;</span></span>\n\n<span class=\"line\"><span style=\"color: #F07178\">    </span><span style=\"color: #89DDFF\">if</span><span style=\"color: #F07178\"> (</span><span style=\"color: #EEFFFF\">res</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #EEFFFF\">status</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">===</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">200</span><span style=\"color: #F07178\">) </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">      </span><span style=\"color: #89DDFF\">return</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">{</span><span style=\"color: #F07178\"> posts</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #F07178\"> </span><span style=\"color: #EEFFFF\">data</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">};</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">    </span><span style=\"color: #89DDFF\">}</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">    </span><span style=\"color: #89DDFF\">this.</span><span style=\"color: #82AAFF\">error</span><span style=\"color: #F07178\">(</span><span style=\"color: #EEFFFF\">res</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #EEFFFF\">status</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #EEFFFF\">data</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #EEFFFF\">message</span><span style=\"color: #F07178\">)</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #89DDFF\">}</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">script</span><span style=\"color: #89DDFF\">&gt;</span></span>\n\n<span class=\"line\"><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">script</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">  </span><span style=\"color: #89DDFF\">export</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #C792EA\">let</span><span style=\"color: #EEFFFF\"> posts</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">script</span><span style=\"color: #89DDFF\">&gt;</span></span></code></pre><p>Now we can simply use the <code>posts</code> object as we created it in the JSON file.</p>\n<pre class=\"shiki\" style=\"background-color: #212121\"><code><span class=\"line\"><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">ul</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">  {#each posts as post}</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">  </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">li</span><span style=\"color: #89DDFF\">&gt;&lt;</span><span style=\"color: #F07178\">a</span><span style=\"color: #89DDFF\"> </span><span style=\"color: #C792EA\">rel</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">prefetch</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\"> </span><span style=\"color: #C792EA\">href</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">blog/{post.slug}</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #EEFFFF\">{post.title}</span><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">a</span><span style=\"color: #89DDFF\">&gt;&lt;/</span><span style=\"color: #F07178\">li</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">  {/each}</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">ul</span><span style=\"color: #89DDFF\">&gt;</span></span></code></pre><h3 id=\"3-syntax-highlighting\">3) Syntax highlighting.</h3>\n<p>After choosing my technologies (I know highlightjs is a popular alternative) this was fairly straightforward. Attaching the code snipit because it was a little tricky to combine examples from Shiki and Marked.</p>\n<pre class=\"shiki\" style=\"background-color: #212121\"><code><span class=\"line\"><span style=\"color: #545454\">// [slug].json.js</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\"> shiki</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">getHighlighter</span><span style=\"color: #EEFFFF\">(</span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\">   </span><span style=\"color: #F07178\">theme</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">material-theme-darker</span><span style=\"color: #89DDFF\">&#39;</span></span>\n<span class=\"line\"><span style=\"color: #EEFFFF\"> </span><span style=\"color: #89DDFF\">}</span><span style=\"color: #EEFFFF\">)</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">then</span><span style=\"color: #EEFFFF\">(highlighter \\</span><span style=\"color: #C792EA\">=&gt;</span><span style=\"color: #EEFFFF\"> </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">   </span><span style=\"color: #C792EA\">const</span><span style=\"color: #F07178\"> </span><span style=\"color: #EEFFFF\">renderer</span><span style=\"color: #F07178\"> \\</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">     code</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #EEFFFF\">code</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #EEFFFF\">infostring</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">       </span><span style=\"color: #89DDFF\">return</span><span style=\"color: #F07178\"> </span><span style=\"color: #EEFFFF\">highlighter</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">codeToHtml</span><span style=\"color: #F07178\">(</span><span style=\"color: #EEFFFF\">code</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #EEFFFF\">infostring</span><span style=\"color: #F07178\">)</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">     </span><span style=\"color: #89DDFF\">}</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">   </span><span style=\"color: #89DDFF\">}</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">   </span><span style=\"color: #EEFFFF\">marked</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">use</span><span style=\"color: #F07178\">(</span><span style=\"color: #89DDFF\">{</span><span style=\"color: #EEFFFF\">renderer</span><span style=\"color: #89DDFF\">}</span><span style=\"color: #F07178\">)</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">}</span><span style=\"color: #EEFFFF\">)</span><span style=\"color: #89DDFF\">;</span></span></code></pre><h2 id=\"üöÄ-and-finally-deployment\">üöÄ And Finally, Deployment!</h2>\n<p>TBD!</p>\n<h2 id=\"üåê-useful-links\">üåê Useful links</h2>\n<ul>\n<li><a href=\"https://www.swyx.io/about/\">https://www.swyx.io/about/</a></li>\n<li><a href=\"https://www.codingwithjesse.com/blog/statically-generating-a-blog-with-svelte-sapper/\">https://www.codingwithjesse.com/blog/statically-generating-a-blog-with-svelte-sapper/</a></li>\n<li><a href=\"https://www.mahmoudashraf.dev/blog/build-a-blog-with-svelte-and-markdown/\">https://www.mahmoudashraf.dev/blog/build-a-blog-with-svelte-and-markdown/</a></li>\n<li><a href=\"https://www.ryanfiller.com/blog/a-deep-dive-into-sapper/\">https://www.ryanfiller.com/blog/a-deep-dive-into-sapper/</a></li>\n<li><a href=\"https://dev.to/joshnuss/create-a-blog-with-sapper-markdown-part-2-31m4\">https://dev.to/joshnuss/create-a-blog-with-sapper-markdown-part-2-31m4</a></li>\n</ul>\n","data":{"slug":"0000","title":"Building This Website with Svelte, Sapper, and Markdown.","date":"2021-1-1","tags":"website, svelte"},"tags":["website","svelte"]}